#experiment to bounce different sizes of bouncy balls, and then fitting lines to the data points recorded. Use linear regression to predict the bounce of all kinds of bouncy balls.

# Task 1
# Create a function called get_y() that takes in m(slope of the line), b(intercept of the line that crosses the y-axis), and x. It should return what the y value would be for that x on that line!
def get_y(m, b, x):
  y = m*x + b
  return y


# Task 2, 3
#To calculate the error between a point and a line, reate a function called calculate_error(), which will take in m, b, and an [x, y] point called point and return the distance between the line and the point.

#To find the distance:
#Get the x-value from the point and store it in a variable called x_point
#Get the y-value from the point and store it in a variable called y_point
#Use get_y() to get the y-value that x_point would be on the line
#Find the difference between the y from get_y() and y_point
#Return the absolute value of the distance (you can use the built-in function abs() to do this)
#The distance represents the error between the line y = m*x + b and the point given.

def calculate_error(m, b, point):
  x_point, y_point = point
  y = m*x_point + b
  distance = abs(y - y_point)
  return distance

# Task 4
# Uncomment each print() statement and check the output against the expected result

# this is a line that looks like y = x, so (3, 3) should lie on it. thus, error should be 0:
#print(calculate_error(1, 0, (3, 3)))

# the point (3, 4) should be 1 unit away from the line y = x:
#print(calculate_error(1, 0, (3, 4)))

# the point (3, 3) should be 1 unit away from the line y = x - 1:
#print(calculate_error(1, -1, (3, 3)))

# the point (3, 3) should be 5 units away from the line y = -x + 1:
#print(calculate_error(-1, 1, (3, 3)))


# Task 5
#an experiment comparing the width of bouncy balls to how high they bounce:

#datapoints = [(1, 2), (2, 0), (3, 4), (4, 4), (5, 3)]
#The first datapoint, (1, 2), means that his 1cm bouncy ball bounced 2 meters. The 4cm bouncy ball bounced 4 meters.

#As we try to fit a line to this data, we will need a function called calculate_all_error(), which takes m and b that describe a line, and points, a set of data like the example above.

#calculate_all_error() should iterate through each point in points and calculate the error from that point to the line (using calculate_error()). It should keep a running total of the error, and then return that total after the loop.

def calculate_all_error(m, b, points):
  total = 0
  for point in points:
    total += calculate_error(m, b, point)
  return total

# Task 6 and 7
# Uncomment each print() statement and check the output against the expected result then we can get ready to find m and b that minimizes this error and fits the data.
datapoints = [(1, 1), (3, 3), (5, 5), (-1, -1)]

# every point in this dataset lies upon y=x, so the total error should be zero:
#print(calculate_all_error(1, 0, datapoints))

# every point in this dataset is 1 unit away from y = x + 1, so the total error should be 4:
#print(calculate_all_error(1, 1, datapoints))

# every point in this dataset is 1 unit away from y = x - 1, so the total error should be 4:
#print(calculate_all_error(1, -1, datapoints))

# the points in this dataset are 1, 5, 9, and 3 units away from y = -x + 1, respectively, so total error should be
# 1 + 5 + 9 + 3 = 18
#print(calculate_all_error(-1, 1, datapoints))


# Tasks 8 and 9
#Try to find a line of best fit by trial and error. We want to try a bunch of different slopes (m values) and a bunch of different intercepts (b values) and see which one produces the smallest error value for his dataset.
#Using a list comprehension, let’s create a list of possible m values to try. Make the list possible_ms that goes from -10 to 10 inclusive, in increments of 0.1.

#Using a list comprehension, let’s create a list of possible m values to try. Make the list possible_ms that goes from -10 to 10 inclusive, in increments of 0.1.

possible_ms = [i/10 for i in range(-100, 101, 1)]
possible_bs = [i/10 for i in range(-20, 21, 1)]

# Task 10
#We are going to find the smallest error. First, we will make every possible y = m*x + b line by pairing all of the possible ms with all of the possible bs. Then, we will see which y = m*x + b line produces the smallest total error with the set of data stored in datapoints.
#First, create the variables that we will be optimizing:
#smallest_error — this should start at infinity (float("inf")) so that any error we get at first will be smaller than our value of smallest_error
#best_m — we can start this at 0
#best_b — we can start this at 0

datapoints = [(1, 2), (2, 0), (3, 4), (4, 4), (5, 3)]

smallest_error = float("inf")
best_m = 0
best_b = 0


# Tasks 11 and 12
#Iterate through each element m in possible_ms
#For every m value, take every b value in possible_bs
#If the value returned from calculate_all_error() on this m value, this b value, and datapoints is less than our current smallest_error,
#Set best_m and best_b to be these values, and set smallest_error to this error.

#By the end of these nested loops, the smallest_error should hold the smallest error we have found, and best_m and best_b should be the values that produced that smallest error value.

#Print out best_m, best_b and smallest_error after the loops.

for m in possible_ms:
  for b in possible_bs:
    error = calculate_all_error(m, b, datapoints) 
    if error < smallest_error:
      best_m = m
      best_b = b
      smallest_error = error
print(best_m, best_b, smallest_error)




# Task 13
#Now we have seen that for this set of observations on the bouncy balls, the line that fits the data best has an m of 0.4 and a b of 1.6:

#y = 0.4x + 1.6
#This line produced a total error of 5.

#Using this m and this b, what does your line predict the bounce height of a ball with a width of 6 to be? In other words, what is the output of get_y() when we call it with:

#m = 0.4
#b = 1.6
#x = 6

print(get_y(0.4, 1.6, 6))

#output -> 4.0
#Our model predicts that the 6cm ball will bounce 4.0m

